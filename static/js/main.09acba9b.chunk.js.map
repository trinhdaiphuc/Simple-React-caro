{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","j","winnerSquare","this","squares","key","rowsWidth","Array","fill","celsWidth","map","row","cel","isArray","winnerMove","item","x","y","renderSquare","renderBoard","React","Component","Game","state","history","from","latestMove","xIsNext","stepNumber","winner","isHistorySortAscending","step","setState","slice","length","arr","newState","concat","player","under","above","push","calculateWinner","status","current","historyMove","move","desc","buttonClass","jumpTo","moves","reverse","boardSize","handleClick","toggleHistorySort","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09acba9b.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nconst boardSize = 20;\n\nfunction Square(props) {\n  return (\n    <button className={props.className} onClick={() => props.onClick()}>\n      {props.value}\n    </button>\n  );\n}\n\nfunction calculateWinner(squares, x, y) {\n  let winnerMove = [];\n  let player = squares[x][y];\n\n  // Check columns have the same value\n  let under = y - 4 > 0 ? y - 4 : 0;\n  let above = y + 5 < boardSize ? y + 5 : boardSize;\n  for (let i = under; i < above; i++) {\n    if (squares[x][i] === player) {\n      winnerMove.push({ x: x, y: i });\n    } else {\n      winnerMove = [];\n    }\n    if (winnerMove.length === 5) return winnerMove;\n  }\n\n  // Check rows have the same value\n  winnerMove = [];\n  under = x - 4 > 0 ? x - 4 : 0;\n  above = x + 5 < boardSize ? x + 5 : boardSize;\n  for (let i = under; i < above; i++) {\n    if (squares[i][y] === player) {\n      winnerMove.push({ x: i, y: y });\n    } else {\n      winnerMove = [];\n    }\n    if (winnerMove.length === 5) return winnerMove;\n  }\n\n  // Check left diagonals have the same value\n  winnerMove = [];\n  under = x - 4 > 0 && y - 4 > 0 ? x - 4 : 0;\n  above = x + 5 < boardSize && y + 5 < boardSize ? x + 5 : boardSize;\n  if (above - under < 5) return false;\n  for (let i = under; i < above; i++) {\n    if (squares[i][y - x + i] === player) {\n      winnerMove.push({ x: i, y: y - x + i });\n    } else {\n      winnerMove = [];\n    }\n    if (winnerMove.length === 5) return winnerMove;\n  }\n\n  // Check right diagonals have the same value\n  winnerMove = [];\n  under = x - 4 > 0 && y - 4 > 0 ? y - 4 : 0;\n  above = x + 5 < boardSize && y + 5 < boardSize ? y + 5 : boardSize;\n  if (above - under < 5) return false;\n  for (let i = under; i < above; i++) {\n    if (!(y + x - i < 0 || y + x - i >= boardSize)) {\n      if (squares[y + x - i][i] === player) {\n        winnerMove.push({ x: y + x - i, y: i });\n      } else {\n        winnerMove = [];\n      }\n      if (winnerMove.length === 5) return winnerMove;\n    }\n  }\n\n  return false;\n}\n\nclass Board extends React.Component {\n  renderSquare(i, j, winnerSquare) {\n    let className = winnerSquare ? \"square-winner\" : \"square\";\n    return (\n      <Square\n        value={this.props.squares[i][j]}\n        winnerSquare={winnerSquare}\n        className={className}\n        key={`${i},${j}`}\n        onClick={() => this.props.onClick(i, j)}\n      />\n    );\n  }\n\n  renderBoard() {\n    const rowsWidth = Array(boardSize).fill(null);\n    const celsWidth = rowsWidth;\n    const board = rowsWidth.map((row, i) => {\n      const squares = celsWidth.map((cel, j) => {\n        let winnerSquare = false;\n        if (Array.isArray(this.props.winnerMove)) {\n          this.props.winnerMove.map((item) => {\n            if (item.x === i && item.y === j) {\n              winnerSquare = true;\n            }\n            return item;\n          });\n        }\n        return this.renderSquare(i, j, winnerSquare);\n      });\n      return (\n        <div className=\"board-row\" key={`row${i}`}>\n          {squares}\n        </div>\n      );\n    });\n    return board;\n  }\n\n  render() {\n    return <div>{this.renderBoard()}</div>;\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array.from(Array(boardSize), () => new Array(boardSize)),\n          latestMove: null,\n        },\n      ],\n      xIsNext: true,\n      stepNumber: 0,\n      winner: null,\n      winnerMove: 0,\n      isHistorySortAscending: true,\n    };\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n      winner: null,\n      winnerMove: null,\n    });\n  }\n\n  handleClick(i, j) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.map((arr) => {\n      return arr.slice();\n    });\n    if (squares[i][j] || this.state.winner) {\n      return;\n    }\n\n    squares[i][j] = this.state.xIsNext ? \"X\" : \"O\";\n    let newState = {\n      history: history.concat([\n        {\n          squares: squares,\n          latestMove: { i, j },\n        },\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n      winner: null,\n    };\n\n    let winnerMove = calculateWinner(squares, i, j);\n\n    if (winnerMove) {\n      newState.winner = squares[i][j];\n      newState.winnerMove = winnerMove;\n    }\n    this.setState(newState);\n  }\n\n  toggleHistorySort() {\n    const { isHistorySortAscending } = this.state;\n    this.setState({ isHistorySortAscending: !isHistorySortAscending });\n  }\n\n  render() {\n    const {\n      history,\n      stepNumber,\n      winnerMove,\n      winner,\n      isHistorySortAscending,\n    } = this.state;\n    const current = history[this.state.stepNumber];\n    const historyMove = history.map((step, move) => {\n      const desc = move\n        ? `Go to move #${move}: (${step.latestMove.i}, ${step.latestMove.j})`\n        : \"Go to game start\";\n      const buttonClass = move === stepNumber ? \"current-selected\" : \"\";\n      return (\n        <li key={move}>\n          <button className={buttonClass} onClick={() => this.jumpTo(move)}>\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    const moves = isHistorySortAscending ? historyMove : historyMove.reverse()\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else if (stepNumber === boardSize * boardSize) {\n      status = \"You are draw\";\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            winnerMove={winnerMove}\n            onClick={(i, j) => this.handleClick(i, j)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={() => this.toggleHistorySort()}>\n            {isHistorySortAscending ? \"Ascending\" : \"Descending\"}\n          </button>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}